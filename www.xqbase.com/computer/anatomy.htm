<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=gb_2312-80">
<meta name="GENERATOR" content="Microsoft FrontPage Express 2.0">
<title>结语――国际象棋程序剖析</title>
<!-- This document was created from RTF source by rtftohtml version
2.7.5 -->
</head>

<body background="../background.gif">

<dl>
    <div align="center"><center>
    <dt><font size="3">《对弈程序基本技术》专题</font></dt>
    </center></div>
    <dt>　</dt>
    <div align="center"><center>
    <dt><font size="6" face="隶书">国际象棋程序剖析</font></dt>
    </center></div><div align="center"><center>
    <dt>　</dt>
    </center></div><div align="center"><center>
    <dt><font size="3" face="Times New Roman">T.A. Marsland */ </font><font
        size="3">文</font></dt>
    </center></div><div align="center"><center>
    <dt><font size="3" face="Times New Roman">* </font><font
        size="3">阿尔伯达大学计算机科学系</font></dt>
    </center></div><div align="center"><center>
    <dt>　</dt>
    </center></div>
    <dt><font size="5" face="楷体_GB2312"><strong>一、简介</strong></font></dt>
    <dt>　</dt>
    <dt><font size="3">　　从理论上说，让机器下国际象棋是一个简单的游戏，只要每一步都考虑各种可能的着法，以及每种着法的后续变化，如此下去直到将死或和棋。但是实际操作中，这种策略是不可行的，因为需要考虑的每种着法加起来会是天文数字。</font></dt>
    <dt><font size="3">　　不管人类还是机器去下棋，都有一整套下棋的理论，人类好几百年前就开始下棋，在近二百年里有很多理论资料，而机器下棋只有五十多年的历史，在机器下棋的诸多理论中，最著名的属</font><font
        size="3" face="Times New Roman">Claude Shannon</font><font
        size="3">在</font><font size="3" face="Times New Roman">1949-50</font><font
        size="3">年提出的两个完全对立的策略――用蛮力考虑所有着法的策略</font><font
        size="3" face="Times New Roman">(A</font><font size="3">策略</font><font
        size="3" face="Times New Roman">)</font><font size="3">，以及靠知识来选择其中一部分着法的策略</font><font
        size="3" face="Times New Roman">(B</font><font size="3">策略</font><font
        size="3" face="Times New Roman">)</font><font size="3">。尽管早在</font><font
        size="3" face="Times New Roman">Shannon</font><font
        size="3">以前，就有一些电子机械可以下比国际象棋简单的棋类，然而</font><font
        size="3" face="Times New Roman">Shannon</font><font
        size="3">的理论却是现代电脑象棋发展的基础。</font></dt>
    <dt>　</dt>
    <dt><font size="3">　　如今的象棋程序把棋局看成树状结构，每个局面表示成棋局树中的一个结点，每个着法代表它的一个分枝</font><font
        size="3" face="Times New Roman">(</font><font size="3">一个结点和深一个结点的连接</font><font
        size="3" face="Times New Roman">)</font><font size="3">。这样，树就由双方不同层面上的所有着法组成</font><font
        size="3" face="Times New Roman">(</font><font size="3">树的一个层面用“层”</font><font
        size="3" face="Times New Roman">(Ply)</font><font
        size="3">这个术语表示，代表一方走的一步棋</font><font
        size="3" face="Times New Roman">)</font><font size="3">。</font></dt>
    <dt><font size="3">　　现在通常的策略是，把树由浅至深分为三个阶段，第一阶段用蛮力搜索</font><font
        size="3" face="Times New Roman">(Shannon</font><font
        size="3">的</font><font size="3" face="Times New Roman">A</font><font
        size="3">策略</font><font size="3"
        face="Times New Roman">)</font><font size="3">，第二阶段用选择性搜索</font><font
        size="3" face="Times New Roman">(B</font><font size="3">策略</font><font
        size="3" face="Times New Roman">)</font><font size="3">，第三阶段用称为“静态搜索”</font><font
        size="3" face="Times New Roman">(Quiescence Search)</font><font
        size="3">的策略，来处理最后变化非常剧烈的局面，在最后一个阶段里，程序只评价吃子着法，兵升变的潜力，将军产生的后果，以及一些强制性着法。所有的程序都使用相同的算法――深度优先的</font><font
        size="3" face="Times New Roman">Alpha-Beta</font><font
        size="3">算法，而不同之处在于每个阶段选择什么样的深度。</font></dt>
    <dt><font size="3">　　通常搜索的深度不是固定的，而是根据当前搜索到的着法在小范围内变动，例如某个结点是将军的局面，那么它的分枝数很少，这个区域内搜索应当加深一些。策略上有非常多的选择，使得程序使用相同模型的时，他们的走棋风格和搜索速度会有显著的差别。</font></dt>
    <dt>　</dt>
    <dt><font size="5" face="楷体_GB2312"><strong>二、树状搜索</strong></font></dt>
    <dt>　</dt>
    <dt><font size="3">　　人类下棋时，往往分析一小部分着法并作展开，相比选择着法而言，机器更愿意考虑得完备，所以需要发展一套逐步求精的技术。“迭代加深”</font><font
        size="3" face="Times New Roman">(Iterative Deepening)</font><font
        size="3">这一技术取代了固定的深度，让机器一次次做更深层的搜索</font><font
        size="3" face="Times New Roman">(</font><font size="3">先是搜索</font><font
        size="3" face="Times New Roman"><em>N</em></font><font
        size="3">层，然后搜索</font><font size="3"
        face="Times New Roman"><em>N</em> + 1</font><font
        size="3">层，</font><font size="3"
        face="Times New Roman"><em>N</em> + 2</font><font
        size="3">层，等等</font><font size="3"
        face="Times New Roman">)</font><font size="3">，直到按计划分配的时间用完为止，这样就可以让机器在有限的时间内找出最好的着法。诸如反驳表和置换表等技术，在与迭代加深结合起来后，可以对着法重新排序，使得下一次迭代时“主要变化”</font><font
        size="3" face="Times New Roman">(Principal Variation)(</font><font
        size="3">上一次找到的最好着法</font><font
        size="3" face="Times New Roman">)</font><font size="3">优先考虑。</font></dt>
    <dt><font size="3">　　另一个排序着法的技术就是记录一些“杀手”着法，这些着法要优先试探，杀手着法就是在搜索树的其他位置能产生截断或裁剪的着法。杀手着法通常是吃子的着法，因此可以简单地认为，吃子的着法应该在其他着法之前考虑。在很多程序中，这个技术被拓展为“历史启发表”</font><font
        size="3" face="Times New Roman">(History Heuristic Table)</font><font
        size="3">，通常是</font><font size="3"
        face="Times New Roman">64x64</font><font size="3">的数组，每个元素存放了该着法引起裁剪的次数。</font></dt>
    <dt>　</dt>
    <dt><font size="3">　　排序着法可以大幅度提高深度优先</font><font
        size="3" face="Times New Roman">Alpha-Beta</font><font
        size="3">搜索的效率，此外还有三个算法也起到同样作用――</font><font
        size="3" face="Times New Roman">Pearl</font><font
        size="3">的侦察</font><font size="3"
        face="Times New Roman">(Scout)</font><font size="3">算法以及相关的负值侦察</font><font
        size="3" face="Times New Roman">(NegaScout)</font><font
        size="3">和主要变例搜索</font><font size="3"
        face="Times New Roman">(Principal Variation Search</font><font
        size="3">，简称</font><font size="3"
        face="Times New Roman">PVS)</font><font size="3">方法，它们具有同一个思想：当主要变例找到时，可以先去验证其他着法是否都不如这个着法好，如果验证下来不是这样，那么它们必须重新搜索</font><font
        size="3" face="Times New Roman">(</font><font size="3">因为它们是更好的着法，必须做完全的搜索</font><font
        size="3" face="Times New Roman">)</font><font size="3">。</font></dt>
    <dt><font size="3">　　另一个能减少搜索量的技术称为“期望搜索”</font><font
        size="3" face="Times New Roman">(Aspiration Search)</font><font
        size="3">，根据当前局面估计一个范围</font><font
        size="3" face="Times New Roman">(</font><font size="3">通常正负半个兵</font><font
        size="3" face="Times New Roman">)</font><font size="3">，用这样一个窗口进行搜索。尽管期望搜索并不那么有效，但是用它的人还是很多的，因为它比主要变例搜索更容易理解。</font></dt>
    <dt>　</dt>
    <dt><font size="3">　　深层次的搜索到底能提高多少精确度，这是很难衡量的。任意局面其搜索树的大小有很大的差异，很多残局每方有约</font><font
        size="3" face="Times New Roman">8</font><font size="3">种着法，而复杂的中局里每方可能有多达</font><font
        size="3" face="Times New Roman">80</font><font size="3">种着法，就现在的技术而言，一般程序在中局阶段能完全考虑</font><font
        size="3" face="Times New Roman">7</font><font size="3">到</font><font
        size="3" face="Times New Roman">10</font><font size="3">层的变化</font><font
        size="3" face="Times New Roman">(</font><font size="3">有个程序设计师声称选择性地搜索能达到</font><font
        size="3" face="Times New Roman">40</font><font size="3">层！</font><font
        size="3" face="Times New Roman">)</font><font size="3">。</font></dt>
    <dt><font size="3">　　“选择性延伸”</font><font
        size="3" face="Times New Roman">(Selective Extension)</font><font
        size="3">是对一些关键着法作更深入的探索，每个程序设计师对这些着法都有自己的界定――可以是防御杀棋的着法，或是为避免失子而作的反击。选择性延伸不能和“单步延伸”</font><font
        size="3" face="Times New Roman">(Singular Extension)</font><font
        size="3">混淆起来，后者是对最好的一步着法进行的更深层次的检查，来验证这个着法是否仍旧是最好的。从某种意义上说它对主要变例进行了短的延伸，是一种很花时间但很有意义的方法。</font></dt>
    <dt>　</dt>
    <dt><font size="3">　　而用得最广泛的做法是“空着启发”</font><font
        size="3" face="Times New Roman">(Null-Move Heuristic)</font><font
        size="3">，即假设一方连走两步，如果产生的结果更糟的话，后面那步变化就应该抛弃掉。由于水平线效应，一些看不到的不可避免的失子，通过这种方法能看到。很多向前裁剪方法起不到很好的效果，但空着向前裁剪往往是很有效的。</font></dt>
    <dt>　</dt>
    <dt><font size="5" face="楷体_GB2312"><strong>三、置换表</strong></font></dt>
    <dt>　</dt>
    <dt>　　置换表的作用如同缓冲存储器，用来记录前面搜索过的局面，这些局面通常在迭代加深的早期搜索过。之所以称为“置换表”<font
        face="Times New Roman">(Transposition Table)</font>，是因为当着法次序发生置换时会有相同的局面。置换表中存储的信息除了局面以外，还有局面的评分，它的最佳着法，以及前一次搜索的深度。</dt>
    <dt>　　“评分”指的是在搜索树的顶端结点(搜索能够到达的水平)对局面进行的评价，这个评价通常包括了静态搜索，来消除由吃子等着法引起的局面的不确定性，包括考虑兵的升变等。</dt>
    <dt>　　在残局的搜索中，置换表的作用发挥得更为明显，每个局面只有很少的着法需要考虑，其他着法都因为置换的发生而不必再去搜索。</dt>
    <dt>　　置换表并不增加代码的长度和复杂性，为置换表分配空间是小事一桩。置换表的每个局面一般需要约<font
        face="Times New Roman">10</font>个字节，通常程序使用可以记录<font
        face="Times New Roman">32K</font>到<font
        face="Times New Roman">1M</font>个局面的置换表。<font
        face="Times New Roman">1993</font>年超级电脑<font
        face="Times New Roman">(Supercomputer)</font>程序自称他们使用了<font
        face="Times New Roman">1G</font>个局面的置换表，而对于程序员来说这完全取决于存储器的容量。</dt>
    <dt>　</dt>
    <dt><font size="5" face="楷体_GB2312"><strong>四、程序的性能及其测评方法</strong></font></dt>
    <dt>　</dt>
    <dt>　　尽管各种程序基本方法是一样的，但是在相同硬件条件下，它们的表现有很大程度的差异，一定程度上这体现了程序设计师对程序所作的投入。</dt>
    <dt>　　比如说，尽管每个程序都有开局库，但开局库是没有哪本书规定的，每个程序小组都在开发自己的开局库。现在开局库的大小从<font
        face="Times New Roman">10,000</font>个局面到<font
        face="Times New Roman">500,000</font>个局面不等<font
        face="Times New Roman">(</font>也有程序试验过<font
        face="Times New Roman">1.7M</font>个局面的开局库<font
        face="Times New Roman">)</font>。</dt>
    <dt>　　相反，只有少数人使用<font
        face="Times New Roman">Ken Tompson</font>制作在<font
        face="Times New Roman">CD-ROM</font>上的<font
        face="Times New Roman">5</font>子到<font
        face="Times New Roman">6</font>子的残局库，一方面原因是目前数据的读取非常缓慢，另一方面原因是大部分棋局都会在用到这些残局库之前结束<font
        face="Times New Roman">(</font>程序设计师们在利用时间的问题上，可能考虑得比较现实吧<font
        face="Times New Roman">)</font>。</dt>
    <dt>　</dt>
    <dt>　　在运行速度的层面上，当今的程序在单处理器上每秒钟可以分析<font
        face="Times New Roman">3,000</font>到<font
        face="Times New Roman">500,000</font>个局面。在相同机器上程序速度的差别是巨大的，这当然有很多解释，用汇编语言写的程序能有比较快的速度，用同一语言来写的程序，用不同的编译器也会导致速度的不同。</dt>
    <dt>　　其中更多的因素在于蛮力搜索、选择性搜索和静态搜索这三个阶段所占的比例。选择性搜索阶段需要额外的时间，因为它还判断哪些着法需要搜索，而在这个慢速、以知识为基础的阶段中，诸多程序在速度上的差别是非常明显的。</dt>
    <dt>　　另一个影响搜索速度和强度的因素，是程序使用的置换表的大小。</dt>
    <dt>　</dt>
    <dt>　　尽管很多象棋程序非常相似，它们的棋力差别仍旧可能非常大。测试棋力是很复杂的过程，由于在正式比赛中程序仍然是可调节的，因此“瑞典排名表”<font
        face="Times New Roman">(Swedish Rating List)</font>的制作小组提出了一个传统的方案――所有的商业程序都连续自动地进行对决，得到几百场比赛的胜负结果，并从这些结果中计算出<font
        face="Times New Roman">ELO</font>等级分，即美国和其他地方棋手们通用的等级分。</dt>
    <dt>　　美国棋手的平均等级分从<font
        face="Times New Roman">1500</font>开始，专家的分数在<font
        face="Times New Roman">2000-2200</font>，大师在<font
        face="Times New Roman">2200-2400</font>。世界排名<font
        face="Times New Roman">300</font>以内的特级大师，等级分则更高。在第八届世界电脑象棋锦标赛中，大多数程序的等级分在<font
        face="Times New Roman">2100-2500</font>。现在瑞典排名表刊登在每期的《国际电脑象棋协会杂志》<font
        face="Times New Roman">(<em>International Computer Chess
        Association Journal</em>)</font>上。</dt>
    <dt>　</dt>
    <dt><font size="5" face="楷体_GB2312"><strong>五、展望</strong></font></dt>
    <dt>　</dt>
    <dt>　　如今顶极的电脑可以挑战特级大师了，尤其是在快棋赛中，单机要比多处理器的并行系统更有优势。单机之所以快，是因为它们不必通过网络来传输着法，而由<font
        face="Times New Roman">10</font>到<font
        face="Times New Roman">100</font>个处理器组成的多处理器系统，则在两小时内完成<font
        face="Times New Roman">40</font>步的标准赛制中表现得更好。不久我们将会有由<font
        face="Times New Roman">1000</font>个高性能处理器组成的系统，到那个时候电脑毫无疑问能比人类棋手算得更远，这将多少能弥补电脑的不足――不具备人类棋手所擅长的战略构思。</dt>
    <dt>　　人类棋手对于局势的简化和基本形势的判断方面都具有高超技巧，他们也善于在对手身上找到弱点，除非局面是无法挽回的。尽管人类棋手有这些优势，我们一直以来都预测说，机器在<font
        face="Times New Roman">5</font>年内能击败人类，现在这个目标正越来越近。要实现这个目标可能需要花上十多年，但是最终肯定会实现的。</dt>
    <dt>　</dt>
    <dt><font size="5" face="楷体_GB2312"><strong>《国际象棋程序剖析》参考资料</strong></font></dt>
    <dt>　</dt>
    <dt>　　<font face="Times New Roman">1. </font>《电脑象棋概论》<font
        face="Times New Roman">(<em>Computer Chess Compendium</em>)</font>，<font
        face="Times New Roman">D.N.L. Levy</font>著，<font
        face="Times New Roman">Springer-Verlag</font>出版社，<font
        face="Times New Roman">1988</font>年；</dt>
    <dt>　　<font face="Times New Roman">2. </font>《电脑象棋与搜索》<font
        face="Times New Roman">(<em>Computer Chess and Search</em>)</font>，<font
        face="Times New Roman">T.A. Marsland</font>文，《人工智能百科全书》<font
        face="Times New Roman">(<em>Encyclopedia of Artificial
        Intelligence</em>)</font>一书的<font
        face="Times New Roman">224-241</font>页，<font
        face="Times New Roman">S. Shapiro</font>主编，<font
        face="Times New Roman">J. Wiley &amp; Sons</font>出版社，<font
        face="Times New Roman">1992</font>年第二版；</dt>
    <dt>　　<font face="Times New Roman">3. </font>《<font
        face="Times New Roman">ICCA(</font>国际电脑象棋协会<font
        face="Times New Roman">)</font>杂志》<font
        face="Times New Roman">(<em>International Computer Chess
        Association Journal</em>)</font>，自<font
        face="Times New Roman">1983</font>年以来每年四期，<font
        face="Times New Roman">ICCA</font>编辑部<font
        face="Times New Roman">([</font>荷兰马斯特里赫特<font
        face="Times New Roman">]</font>林堡大学<font
        face="Times New Roman">(University of Limburg)</font>计算机系，<font
        face="Times New Roman">P.O. Box 616, 6200 MD Maastricht,
        The Netherlands)</font>出版；</dt>
    <dt>　　<font face="Times New Roman">4. </font>电脑、象棋与认知<font
        face="Times New Roman">(<em>Computers, Chess and
        Cognition</em>)</font>，<font face="Times New Roman">T.A.
        Marsland</font>和<font face="Times New Roman">J.
        Schaeffer</font>主编，<font face="Times New Roman">Springer-Verlag</font>出版社，<font
        face="Times New Roman">1990</font>年；</dt>
    <dt>　　<font face="Times New Roman">5. </font>电脑象棋进展<font
        face="Times New Roman">(<em>Advances in Computer Chess</em>)</font>，一至七卷，从<font
        face="Times New Roman">1977</font>到<font
        face="Times New Roman">1994</font>年由多人主编，由多个出版社出版。</dt>
    <dt>　</dt>
    <dt>　　出处：<a
        href="http://www.cs.ualberta.ca/~tony/ICCA/anatomy.html"
        target="_blank"><font face="Times New Roman">http://www.cs.ualberta.ca/~tony/ICCA/anatomy.html</font></a></dt>
    <dt>　　译者：象棋百科全书网 <font
        face="Times New Roman">(</font><a
        href="mailto:webmaster@xqbase.com"><font
        face="Times New Roman">webmaster@xqbase.com</font></a><font
        face="Times New Roman">)</font></dt>
    <dt>　　类型：全译</dt>
</dl>

<dir>
    <li>上一篇　<a href="other_stragy.htm">其他策略――策略和技巧</a></li>
    <li>下一篇</li>
    <li>返　回　<a href="../computer.htm">象棋百科全书――计算机博弈</a></li>
</dir>
<div align="center"><center>

<table border="0">
    <tr>
        <td><p align="center"><a
        href="http://www.xqbase.com/" target="_blank"><img
        src="../xqbase.gif" border="0" width="88"
        height="31"></a></p>
        </td>
    </tr>
    <tr>
        <td><a href="http://www.xqbase.com/"
        target="_blank"><font size="2" face="Arial"><strong>www.xqbase.com</strong></font></a></td>
    </tr>
</table>
</center></div>
</body>
</html>
