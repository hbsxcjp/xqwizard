<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=gb_2312-80">
<meta name="GENERATOR" content="Microsoft FrontPage Express 2.0">
<title>国际象棋程序设计(二)：数据结构</title>
</head>

<body background="../background.gif">

<dl>
    <div align="center"><center>
    <dt><font size="6" face="隶书">国际象棋程序设计(二)：数据结构</font></dt>
    </center></div><div align="center"><center>
    <dt>　</dt>
    </center></div><div align="center"><center>
    <dt><font face="Times New Roman">Fran</font>&ccedil;<font
        face="Times New Roman">ois Dominic Laram</font>&eacute;<font
        face="Times New Roman">e/</font>文</dt>
    </center></div>
    <dt>　</dt>
    <dt>　　上个月我简要介绍了象棋程序设计中所需要的知识，其他信息完全的双人游戏也是一样的。现在我们将讨论一些细节――棋盘的内部表示方法。</dt>
    <dt>　　在棋盘表示方法这个理念上，近三十年内没有多大发展，你可能会觉得很吃惊。它的发展需要智慧的推动，很早就有人提出过绝妙的方案了，但同时也受到制约，因为这些方案需要数据结构的支持，某些数据结构至今还没有实现。</dt>
    <dt>　　尽管如此，我还是会介绍三种数据结构，尽管它们并不是必需的，但是对于提高你的下棋水平是大有帮助的。其中两种可以加快思考速度<font
        face="Times New Roman">(</font>但是其中一种需要无限多的存储器<font
        face="Times New Roman">)</font>，另一种可以加快着法产生速度。<font
        color="#0000FF">【译注：分别指后面要提到的置换表、历史表和着法生成预处理的数据库。】</font></dt>
    <dt>　　在我们继续讨论之前，我提一句格言：“无论是象棋还是其他游戏，你通常使用的数据结构，应该是能达到目的的最简单的数据结构。”然而象棋程序设计者提出了很多技巧，它们能让程序运行的更快，其中相当多的还适用于其他游戏。如果你对你要设计的游戏不很了解，而且手头的资料很有限，那么你应该好好掌握我所提到的这些技巧，你可以把这些技巧试验到你的程序上。</dt>
    <dt>　</dt>
    <dt><font size="5" face="楷体_GB2312"><b>基本的棋盘表示</b></font></dt>
    <dt>　</dt>
    <dt>　　在上世纪<font face="Times New Roman">70</font>年代，个人电脑的存储器是稀有资源，所以棋盘表示得越紧凑越好。很多人会很自信地说：用一个<font
        face="Times New Roman">64</font>字节的数组，每个字节表示棋盘上的一个格子，用一个整数就可以表示格子的位置了。<font
        face="Times New Roman">(</font>任何棋盘的数据结构都必须用一些额外的字节，来记录吃过路兵的目标格、王车易位权利等信息，但是这里我们暂且忽略它，因为这些因素可以独立处理，而且处理方法大同小异。<font
        face="Times New Roman">)</font></dt>
    <dt>　　后来又流行一些更优化的算法：</dt>
    <dt>　</dt>
    <dt>　　<font face="Times New Roman">1. </font>早期的<font
        face="Times New Roman">SARGON</font><font color="#0000FF">【一个象棋程序】</font>扩展了<font
        face="Times New Roman">64</font>字节的数组，在它的外围加了两圈“虚格”，并在这些格子上作了非法标记。这一技巧能加快着法产生的速度，例如象在走棋时会延斜线滑行，直到走到虚格上才中止。这样就没有必要用复杂的运算来预先判断象到达的格子是否会超出存储器上的表示了。第二圈虚格是给马用的，例如位于盘角的马试图跳出棋盘，这就必须用两圈虚格来保护。</dt>
    <dt>　　<font face="Times New Roman">2. MYCHESS</font>用了相反的方法，它只用<font
        face="Times New Roman">32</font>字节表示一个棋盘，每个字节代表一个棋子，例如代表白方王、黑方王翼马前兵<font
        color="#0000FF">【英文居然是</font><font
        color="#0000FF" face="Times New Roman">black King's
        Knight's Pawn</font><font color="#0000FF">，一开始让我大惑不解】</font>等，它存储的信息是棋盘上的位置，或者已经被吃的标记。这种技术有一个缺点，它无法描述由兵升变而来的其他棋子<font
        face="Times New Roman">(</font>同时这个棋子在棋盘上还有一个<font
        face="Times New Roman">)</font>。在后来的版本中，这个缺点被修正了。<font
        color="#0000FF">【其实这并不难办，一个字节取值从</font><font
        color="#0000FF" face="Times New Roman">0</font><font
        color="#0000FF">到</font><font color="#0000FF"
        face="Times New Roman">255</font><font color="#0000FF">，通常</font><font
        color="#0000FF" face="Times New Roman">255</font><font
        color="#0000FF">表示该子已被吃，从</font><font
        color="#0000FF" face="Times New Roman">0</font><font
        color="#0000FF">到</font><font color="#0000FF"
        face="Times New Roman">63</font><font color="#0000FF">表示该子在棋盘上的位置，兵通常是升变成后的，那么从</font><font
        color="#0000FF" face="Times New Roman">64</font><font
        color="#0000FF">到</font><font color="#0000FF"
        face="Times New Roman">127</font><font color="#0000FF">可以表示该子已经升变为后，如果升变为车、马或象，则需要额外的字节来处理。】</font></dt>
    <dt>　</dt>
    <dt>　　如今，这种极端吝啬的数据结构只可能出现在掌上电脑、手机或电视机机顶盒上，它们的<font
        face="Times New Roman">80~90%</font>的资源都被操作系统占用，没有额外的空间给游戏使用。但是，某些游戏却别无选择地使用这种方法<font
        color="#0000FF">【我也不知道什么游戏非得使用这种方法不可】</font>。</dt>
    <dt>　　想更多地了解以前的象棋程序，可以看一下<font
        face="Times New Roman">David Welsh</font>在<font
        face="Times New Roman">1984</font>年写的《计算机象棋》<font
        face="Times New Roman">(<i>Computer Chess</i>)</font>一书。</dt>
    <dt>　</dt>
    <dt><font size="5" face="楷体_GB2312"><b>位棋盘</b></font></dt>
    <dt>　</dt>
    <dt>　　用一个数组来表示棋盘，对于很多游戏来说，就找不到更好的办法了。但是对于像象棋、西洋跳棋之类在<font
        face="Times New Roman">64</font>格棋盘上的游戏来说，有一个高明的技巧――“位棋盘”
        <font face="Times New Roman">(</font>首先由苏联的<font
        face="Times New Roman">KAISSA</font>制作组提出<font
        face="Times New Roman">)</font>，在上世纪<font
        face="Times New Roman">60</font>年代末诞生了。</dt>
    <dt>　　<font face="Times New Roman">KAISSA</font>是运行在<font
        face="Times New Roman">64</font>位处理器上的程序<font
        color="#0000FF">【我很怀疑当时就有</font><font
        color="#0000FF" face="Times New Roman">64</font><font
        color="#0000FF">位处理器，或许当时处理器字长的概念和现在的有所不同】</font>。“<font
        face="Times New Roman">64</font>”恰巧是象棋棋盘格子的数目，所以这就有可能让一个字来表示一个棋盘，以判断某个格子的状态是“是”或者“非”。例如，一个位棋盘可以回答棋盘的每个格子“是否有白子”。<font
        color="#0000FF">【把位棋盘运用到中国象棋上，这是我将要进行的一个课题，中国象棋的棋盘有</font><font
        color="#0000FF" face="Times New Roman">90</font><font
        color="#0000FF">个格点，可以用</font><font
        color="#0000FF" face="Times New Roman">3</font><font
        color="#0000FF">个</font><font color="#0000FF"
        face="Times New Roman">32</font><font color="#0000FF">位的字来表示。】</font></dt>
    <dt>　　因此，一个完整的局面需要用<font
        face="Times New Roman">12</font>个位棋盘表示：白兵、白车、黑兵等等。再加上两个用来表示“所有白子”和“所有黑子”的位棋盘，以加快运算速度。<font
        color="#0000FF">【其实只需要</font><font
        color="#0000FF" face="Times New Roman">8</font><font
        color="#0000FF">个就可以了，同一兵种</font><font
        color="#0000FF" face="Times New Roman">(</font><font
        color="#0000FF">不管黑白</font><font color="#0000FF"
        face="Times New Roman">)</font><font color="#0000FF">用一个位棋盘，一共是</font><font
        color="#0000FF" face="Times New Roman">6</font><font
        color="#0000FF">个，再加上代表“所有白子”和“所有黑子”的。做得更过分的是，有人把象和后并作一个位棋盘，车和后并作一个位棋盘，这样又可以减少一个。如果要表示白方的象，只要“所有白子”、“所有车或后”的补集</font><font
        color="#0000FF" face="Times New Roman">(</font><font
        color="#0000FF">用“非”运算</font><font
        color="#0000FF" face="Times New Roman">)</font><font
        color="#0000FF">、“所有象或后”这三个位棋盘作“与”运算就可以了。】</font>或许你还想用一个位棋盘表示被某种子力攻击到的格子，诸如此类，这些位棋可以盘灵活运用在着法产生的运算过程中。</dt>
    <dt>　　位棋盘之所以有效，是因为很多运算可以转化为处理器的一个逻辑指令。例如，假设你需要确认黑王被白后将军，如果用简单的数组来表示棋盘，那么你需要这样做：</dt>
    <dt>　</dt>
    <dt>　　<font face="Times New Roman">1. </font>首先找到后的位置，这需要从<font
        face="Times New Roman">64</font>个字节中一个一个地找；</dt>
    <dt>　　<font face="Times New Roman">2. </font>然后在后所能走的八个方向找，直到找到王或者找到后走不到的格子为止。</dt>
    <dt>　</dt>
    <dt>　　这些运算是相当花费时间的，如果后碰巧是在数组的最后一格，更糟的是，将军只会发生在少数情况下<font
        color="#0000FF">【这种运算纯粹是白费时间！】</font>。</dt>
    <dt>　　如果用位棋盘，那你只要这样做：</dt>
    <dt>　</dt>
    <dt>　　<font face="Times New Roman">1. </font>载入“白方后的位置”的位棋盘；</dt>
    <dt>　　<font face="Times New Roman">2. </font>根据这个位置，从索引数据库中找到被后攻击的位棋盘；</dt>
    <dt>　　<font face="Times New Roman">3. </font>用这个位棋盘和“黑方王的位置”的位棋盘作“与”运算。</dt>
    <dt>　</dt>
    <dt>　　如果结果不是零，则说明黑王被白后将军。假设被后攻击的位棋盘是储藏于存储器中的<font
        color="#0000FF">【这是上面提到的第二步的前提】</font>，那么整个操作只需要<font
        face="Times New Roman">3</font>到<font
        face="Times New Roman">4</font>个时钟周期<font
        color="#0000FF">【通常计算机执行</font><font
        color="#0000FF" face="Times New Roman">1</font><font
        color="#0000FF">条指令需要</font><font
        color="#0000FF" face="Times New Roman">1(</font><font
        color="#0000FF">算术或逻辑运算</font><font
        color="#0000FF" face="Times New Roman">)</font><font
        color="#0000FF">到</font><font color="#0000FF"
        face="Times New Roman">2(</font><font color="#0000FF">寻址操作</font><font
        color="#0000FF" face="Times New Roman">)</font><font
        color="#0000FF">个时钟周期】</font>。</dt>
    <dt>　　<font color="#0000FF">【这里允许我发挥一下，原作所说的“从索引的数据库中找到”</font><font
        color="#0000FF" face="Times New Roman">(</font><font
        color="#0000FF">即上面提到的第二步</font><font
        color="#0000FF" face="Times New Roman">)</font><font
        color="#0000FF">，其实并非是简单的一步，对于后的每个位置，都有一定的攻击格子</font><font
        color="#0000FF" face="Times New Roman">(</font><font
        color="#0000FF">从边线到中心依次是</font><font
        color="#0000FF" face="Times New Roman">21</font><font
        color="#0000FF">、</font><font color="#0000FF"
        face="Times New Roman">23</font><font color="#0000FF">、</font><font
        color="#0000FF" face="Times New Roman">25</font><font
        color="#0000FF">和</font><font color="#0000FF"
        face="Times New Roman">27</font><font color="#0000FF">格</font><font
        color="#0000FF" face="Times New Roman">)</font><font
        color="#0000FF">，但是要考虑被别的子阻挡的情况，程序无法为所有的情况都作索引，最多只能对某条线</font><font
        color="#0000FF" face="Times New Roman">(</font><font
        color="#0000FF">横线、纵线或斜线</font><font
        color="#0000FF" face="Times New Roman">)</font><font
        color="#0000FF">的棋子占有情况作索引，这也需要</font><font
        color="#0000FF" face="Times New Roman">2<sup>8</sup> =
        256 </font><font color="#0000FF">种情况，再加后本身有</font><font
        color="#0000FF" face="Times New Roman">64</font><font
        color="#0000FF">种位置，所以即使这样，数据库中也至少要保存</font><font
        color="#0000FF" face="Times New Roman">256x64 = 16384</font><font
        color="#0000FF">个位棋盘。另外，横线、纵线和两条斜线的处理方法各不相同，横线只要作简单的“移位运算”就可以了，而纵线和两条斜线都要用到“位棋盘旋转”的技术，为了提高运算效率，程序的复杂程度是惊人的，细节可以参考《对弈程序基本技术》专题之《</font><a
        href="struct_rotation.htm" target="_blank"><font
        color="#0000FF">数据结构――旋转的位棋盘</font></a><font
        color="#0000FF">》一文，文中作者多次提示读者用咖啡来提神，以完成烦琐的程序。】</font></dt>
    <dt>　　再举一个例子，如果在当前的棋盘上，你要产生白马的所有着法，那么你只要找到当与前位置相关联的“马能走到的格子”的位棋盘，并“与”<font
        face="Times New Roman">(AND)</font>上“所有被白方占有的格子”的位棋盘的补集<font
        face="Times New Roman">(</font>就是对这个位棋盘作“非”<font
        face="Times New Roman">(NOT)</font>运算<font
        face="Times New Roman">)</font>，因为马的着法限制仅仅在于它不能去吃自己的子。<font
        color="#0000FF">【国际象棋比较简单，而中国象棋中还有“绊马腿”的限制</font><font
        color="#0000FF" face="Times New Roman">(</font><font
        color="#0000FF">还有象也是</font><font
        color="#0000FF" face="Times New Roman">)</font><font
        color="#0000FF">，这种情况该怎样使用位棋盘，也是我将要研究的课题。】</font></dt>
    <dt>　　如果你想更详细地了解位棋盘<font
        face="Times New Roman">(</font>也只是稍微详细一点而已<font
        face="Times New Roman">)</font>，可以去看看描述<font
        face="Times New Roman">CHESS 4.5 (</font>它是由美国西北大学开发的<font
        face="Times New Roman">)</font>的文章――<font
        face="Times New Roman">Peter Frey</font>写的《人脑和电脑的象棋技巧》<font
        face="Times New Roman">(<i>Ches Skill in Man and Machine</i>)</font>，现在至少已经出了两版了，分别出版于<font
        face="Times New Roman">1977</font>年和<font
        face="Times New Roman">1981</font>年。</dt>
    <dt>　　值得注意的事，到今天为止，几乎还没有真正意义上使用<font
        face="Times New Roman">64</font>位处理器的个人电脑，所以位棋盘的速度优势是要打折扣的。尽管如此，位棋盘的技术仍是行之有效的。<font
        color="#0000FF">【苹果公司的</font><font
        color="#0000FF" face="Times New Roman">Macintosh</font><font
        color="#0000FF">图形工作站据说是</font><font
        color="#0000FF" face="Times New Roman">64</font><font
        color="#0000FF">位处理器，但不知有没有针对这种电脑的象棋软件。时隔</font><font
        color="#0000FF" face="Times New Roman">4</font><font
        color="#0000FF">年，到我翻译这篇文章时，还没有什么别的</font><font
        color="#0000FF" face="Times New Roman">64</font><font
        color="#0000FF">位处理器用在个人电脑上。因为毕竟没这个必要，除非你专门用它来玩国际象棋。】</font></dt>
    <dt>　</dt>
    <dt><font size="5" face="楷体_GB2312"><b>置换表</b></font></dt>
    <dt>　</dt>
    <dt>　　在象棋里，有很多着法可以到达相同的位置。例如，不管你先走
        <font face="Times New Roman">1. P-K4 ... 2. P-Q4</font>或者<font
        face="Times New Roman">1. P-Q4... 2.P-K4</font>，<font
        color="#0000FF">【这里</font><font color="#0000FF"
        face="Times New Roman">K4</font><font color="#0000FF">和</font><font
        color="#0000FF" face="Times New Roman">Q4</font><font
        color="#0000FF">即</font><font color="#0000FF"
        face="Times New Roman">e4</font><font color="#0000FF">和</font><font
        color="#0000FF" face="Times New Roman">d4</font><font
        color="#0000FF">的，在实战中有这样的例子，</font><font
        color="#0000FF" face="Times New Roman">1. e4 e6 2. d4</font><font
        color="#0000FF">和</font><font color="#0000FF"
        face="Times New Roman">1. d4 e6, 2. e4</font><font
        color="#0000FF">是形成法兰西防御一种变例的两种途径。】</font>最终局面是一样的。有不同的路线可以达到同样位置的，这种现象称为“置换”<font
        face="Times New Roman">(Transposing)</font>。<font
        color="#0000FF">【在中国象棋中，置换现象更为普遍，通常用成语“殊途同归”来称呼这种现象。】</font></dt>
    <dt>　　如果你的程序已经对<font
        face="Times New Roman">1. P-Q4... 2.P-K4</font>产生的结果竭尽全力作了搜索和评估，那么你最好记住这个结果，以避免碰到<font
        face="Times New Roman">1. P-K4... 2.P-Q4</font>时再作同样的运算。自上世纪<font
        face="Times New Roman">60</font>年代<font
        face="Times New Roman">Richard Greenblatt</font>的<font
        face="Times New Roman">Mac Hack VI</font>问世以来，所有的对弈程序都会吸纳“置换表”这一技术，这就是原因所在。</dt>
    <dt>　　置换表存储的是已经搜索过的结果，它通常使用类似于散列表<font
        face="Times New Roman">(Hash Dictionary)</font>的数据结构来达到最快的查询速度。在搜索某个局面时，结果<font
        face="Times New Roman">(</font>包括局面分析的值、搜索深度、最佳着法等<font
        face="Times New Roman">)</font>就存储到置换表里。当搜索新的局面时，我们先从置换表里找，如果已经有这种局面，那么就可以利用它，省去重复的搜索。</dt>
    <dt>　　这种处理有以下很多好处：</dt>
    <dt>　</dt>
    <dt>　　<font face="Times New Roman">1. </font>加快速度。在置换情况发生得很多时<font
        face="Times New Roman">(</font>特别是残局局面里，棋盘上棋子很少时<font
        face="Times New Roman">)</font>，<font
        face="Times New Roman">90%</font>以上的局面可以在表中找到。<font
        color="#0000FF">【在中国象棋中，这优势时更为明显，因为它的子力密度小，在开局阶段就有很多“殊途同归”的现象。】</font></dt>
    <dt>　　<font face="Times New Roman">2. </font>任意深度。假设你需要对某个局面搜索到一个指定的深度，例如<font
        face="Times New Roman">4</font>步<font
        face="Times New Roman">(</font>也就是两个回合<font
        face="Times New Roman">)</font>，如果置换表里有这个局面而且已经搜索了<font
        face="Times New Roman">6</font>步，那么你不仅可以跳过这次搜索，还可以得到比预期更精确的结果。</dt>
    <dt>　　<font face="Times New Roman">3. </font>用途广泛。通常每个象棋程序都配有“开局库”<font
        face="Times New Roman">(Opening Book)</font>，即包含一些常见局面及其最好的着法，这些通常是从已有的记载中提炼的<font
        color="#0000FF">【例如特级大师们写的“象棋开局大全”或“象棋开局手册”之类的书，而我本人更倾向于从大量对局记录中提炼的结果】</font>。有了开局库，程序就不必在开局阶段就做傻事了<font
        color="#0000FF">【因为前人已经做过无数次的计算了】</font>。既然开局库的操作过程和置换表是一样的<font
        face="Times New Roman">(</font>即搜索局面<font
        face="Times New Roman">)</font>，那么为什么不在棋局一开始就把开局库装入我们的置换表里去呢？如果这样做，即使棋局暂时脱离了开局库，后来又回到开局库里的局面<font
        color="#0000FF">【要注意，这个局面可以是棋局过程中出现的局面，但更多的情况是搜索程序推演到的】</font>，那么置换表里保留了这样的局面，我们仍旧有机会用到它。</dt>
    <dt>　</dt>
    <dt>　　置换表唯一的缺点就是它贪婪地占用着存储器，无论如何它至少需要存储成千上万个局面，百万甚至上亿就更好了。如果每个局面用<font
        face="Times New Roman">16</font>字节<font
        color="#0000FF">【用最紧凑的办法至少也需要</font><font
        color="#0000FF" face="Times New Roman">32</font><font
        color="#0000FF">字节</font><font color="#0000FF"
        face="Times New Roman">(</font><font color="#0000FF">用</font><font
        color="#0000FF" face="Times New Roman">MYCHESS</font><font
        color="#0000FF">这种吝啬的办法</font><font
        color="#0000FF" face="Times New Roman">)</font><font
        color="#0000FF">，但是这里可以存放“散列键值”，下面会提到这个技术】</font>，那么在存储器紧缺的时候这将成为很严重的问题。</dt>
    <dt>　　置换表还有其他用途。</dt>
    <dt>　　<font face="Times New Roman">CHESS 4.5</font>还用散列表来存储其他的局面计算结果<font
        color="#0000FF">【指下面提到的兵型、子力平衡等】</font>，这些计算结果在多数情况下是不会变动的，例如：</dt>
    <dt>　　<font face="Times New Roman">1. </font>兵型<font
        face="Times New Roman">(Pawn Structure)</font>。散列表只存储兵的位置，这需要较小的存储空间，由于兵的移动不会很频繁，所以<font
        face="Times New Roman">99%</font>的兵型局面可以在散列表中找到；<font
        color="#0000FF">【国际象棋的局面分析中，需要考虑连兵、叠兵、孤兵、通路兵等因素，这些计算是相当费时的，而中国象棋就没有这个必要了。】</font></dt>
    <dt>　　<font face="Times New Roman">2. </font>子力平衡<font
        face="Times New Roman">(Material Balance)</font>，即棋盘上子力的相对强弱，它只在吃子或兵升变时变动。</dt>
    <dt>　　在<font face="Times New Roman">CPU</font>速度不快的今天，这些方法或许看来用处不是很大，但是它们还是有指导意义的，一些稍微花费存储器的预处理可以节省相当多的计算。<font
        color="#0000FF">【因为寻址操作</font><font
        color="#0000FF" face="Times New Roman">(</font><font
        color="#0000FF">特别指在若干</font><font
        color="#0000FF" face="Times New Roman">M</font><font
        color="#0000FF">的大范围区域内寻址</font><font
        color="#0000FF" face="Times New Roman">)</font><font
        color="#0000FF">所占用的时间要远多于简单的运算指令，如果哪天寻址操作的速度接近于基本运算了，那么这种技术将会对程序运行速度有很大的提升。】</font>如果你仔细研究你的程序，或许你会发现这方面是值得改进的。</dt>
    <dt>　</dt>
    <dt><font size="5" face="楷体_GB2312"><b>为棋盘产生散列键值</b></font></dt>
    <dt>　</dt>
    <dt>　　上面提到的置换表的结构，是由散列表来实现的，由此引发了以下课题：你如何快速而有效地从棋盘来产生散列键值<font
        face="Times New Roman">(Hash Key)</font>？</dt>
    <dt>　　以下是<font face="Times New Roman">1970</font>年<font
        face="Times New Roman">Zobrist</font>的方案。</dt>
    <dt>　　<font face="Times New Roman">1. </font>产生<font
        face="Times New Roman">12x64</font>个<font
        face="Times New Roman">N</font>位的随机数<font
        face="Times New Roman">(</font>如果置换表能储存<font
        face="Times New Roman">2<sup>N</sup></font>个局面<font
        face="Times New Roman">)</font>，并把他们做成一张表。每个随机数只跟某个位置上的某种棋子有关<font
        face="Times New Roman">(</font>例如<font
        face="Times New Roman">H4</font>格的黑车<font
        face="Times New Roman">)</font>，空的格子用零表示；<font
        color="#0000FF">【因为棋子总共有</font><font
        color="#0000FF" face="Times New Roman">12</font><font
        color="#0000FF">种，棋盘总共有</font><font
        color="#0000FF" face="Times New Roman">64</font><font
        color="#0000FF">格，所以是</font><font
        color="#0000FF" face="Times New Roman">12x64</font><font
        color="#0000FF">个数，空的格子不用随机数而用</font><font
        color="#0000FF" face="Times New Roman">0</font><font
        color="#0000FF">表示。】</font></dt>
    <dt>　　<font face="Times New Roman">2. </font>先把散列键值设为零；</dt>
    <dt>　　<font face="Times New Roman">3. </font>搜索整个棋盘，每遇到一个子，就在原来的散列键值上“异或”<font
        face="Times New Roman">(XOR)</font>它所对应的随机数，重复这个过程直到整个棋盘被检查一遍。</dt>
    <dt>　　这个方案有趣的一面在于，每走一步，散列键值的更新都非常容易，不需要重新搜索整个棋盘。你知道“<font
        face="Times New Roman">XOR</font>图形处理”<font
        face="Times New Roman">(XOR-Graphics)</font>吗？某个图形用<font
        face="Times New Roman">XOR</font>运算作用到背景上，然后再作同样一次运算，不就又回到背景了吗？这里也同样这么做。<font
        color="#0000FF">【如果你熟悉图形操作中的技术，就不难理解了，原文把这个过程比作“位图”</font><font
        color="#0000FF" face="Times New Roman">(Bitmap)</font><font
        color="#0000FF">操作，</font><font color="#0000FF"
        face="Times New Roman">12x64</font><font color="#0000FF">个棋子的状态就对应</font><font
        color="#0000FF" face="Times New Roman">12x64</font><font
        color="#0000FF">张位图，原先的散列键值被比作“背景”</font><font
        color="#0000FF" face="Times New Roman">(Background)</font><font
        color="#0000FF">，只要在背景上作位图的粘贴操作</font><font
        color="#0000FF" face="Times New Roman">(</font><font
        color="#0000FF">用的是</font><font color="#0000FF"
        face="Times New Roman">XOR</font><font color="#0000FF">处理</font><font
        color="#0000FF" face="Times New Roman">)</font><font
        color="#0000FF">就可以了。】</font>举个<font
        face="Times New Roman">H1</font>格的白车吃掉了<font
        face="Times New Roman">H4</font>格的黑兵的例子，要产生这个散列键值，先<font
        face="Times New Roman">XOR</font>“在<font
        face="Times New Roman">H1</font>格的白车”这个随机数<font
        face="Times New Roman">(</font>把这个图形擦掉<font
        face="Times New Roman">)</font>，然后是“在<font
        face="Times New Roman">H4</font>格的黑兵”<font
        face="Times New Roman">(</font>把这个图形也擦掉<font
        face="Times New Roman">)</font>和“在<font
        face="Times New Roman">H4</font>格的白车”<font
        face="Times New Roman">(</font>粘贴一个新的图形，代表新的车的位置<font
        face="Times New Roman">)</font><font color="#0000FF">【其实顺序是无关紧要的】</font>。</dt>
    <dt>　　用相同的方法，不同的随机数，可以产生第二个散列键值，或称“散列锁”<font
        face="Times New Roman">(Hash Lock)</font><font
        color="#0000FF">【在英语中</font><font
        color="#0000FF" face="Times New Roman">Lock(</font><font
        color="#0000FF">锁</font><font color="#0000FF"
        face="Times New Roman">)</font><font color="#0000FF">和</font><font
        color="#0000FF" face="Times New Roman">Key(</font><font
        color="#0000FF">钥匙</font><font color="#0000FF"
        face="Times New Roman">)</font><font color="#0000FF">是对应的】</font>，它是在置换表中存储的真正有用的信息。这个技术是用来检测冲突的，如果恰巧有两个局面具有相同的散列键值，那么他们具有同样的散列锁的几率是微乎其微的。</dt>
    <dt>　</dt>
    <dt><font size="5" face="楷体_GB2312"><b>历史表</b></font></dt>
    <dt>　</dt>
    <dt>　　“历史启发”<font face="Times New Roman">(History
        Heuristic)</font>是“杀手着法”<font
        face="Times New Roman">(Killer Move)</font><font
        color="#0000FF">【杀手着法指能产生截断的着法，以后的连载会提到的】</font>技术的衍生技术。一篇研究性的文章是这么解释的，历史表用来保存这些着法，在过去的搜中非常有意义<font
        face="Times New Roman">(</font>因为使用高效搜索技术的而对它进行了很深的搜索<font
        face="Times New Roman">)</font>，这个着法今后还可能用到。历史表由一个<font
        face="Times New Roman">64x64</font>的整数数组构成<font
        color="#0000FF">【着法的起始格和到达格，共有</font><font
        color="#0000FF" face="Times New Roman">64x64</font><font
        color="#0000FF">种组合】</font>，记录每种着法的数值，当搜索算法认为某个着法很有用时，它会让历史表增加这步的数值。表中的数值是用来对着法排序的，“历史上占优势”的着法会优先考虑。</dt>
    <dt>　</dt>
    <dt><font size="5" face="楷体_GB2312"><b>着法产生的预处理</b></font></dt>
    <dt>　</dt>
    <dt>　　着法的产生<font face="Times New Roman">(</font>即决定特定位置下那些着法是合理的<font
        face="Times New Roman">)</font>和局面的估计一样，是象棋程序设计中计算量最大的部分。因此，在这个方面的一点预处理会对提高速度大有帮助。</dt>
    <dt>　　我个人喜欢<font face="Times New Roman">Jean
        Goulet</font>在<font face="Times New Roman">1984</font>年写的《象棋的数据结构》<font
        face="Times New Roman">(<em>Data Structures for Chess</em></font>，<font
        face="Times New Roman">McGill</font>大学出版社<font
        face="Times New Roman">)</font>一书中提到的方案，它概括为：</dt>
    <dt>　</dt>
    <dt>　　<font face="Times New Roman">1. </font>出于着法产生的目的，棋子的颜色是无关紧要的，除了兵以外，它只朝对面走；</dt>
    <dt>　　<font face="Times New Roman">2. </font>对于基本的子力和它的位置，有<font
        face="Times New Roman">64x5=320</font>种组合<font
        color="#0000FF">【指除了兵以外的</font><font
        color="#0000FF" face="Times New Roman">5</font><font
        color="#0000FF">种棋子，根据上一条，这些棋子是不分黑白的】</font>，黑兵有<font
        face="Times New Roman">48</font>个格子可以放<font
        face="Times New Roman">(</font>他们后面一行是走不到的，并且一到第八行就会变成别的棋子<font
        face="Times New Roman">)</font>，白兵也有<font
        face="Times New Roman">48</font>个格子；</dt>
    <dt>　　<font face="Times New Roman">3. </font>从某个格子沿某个方向，可以确定一条着法“射线”，例如，后从<font
        face="Times New Roman">H3</font>格朝北走，这就是一条“射线”；</dt>
    <dt>　　<font face="Times New Roman">4. </font>每个格子上的每个棋子，都有确定的几条射线可以走，例如位于中央的王可以朝<font
        face="Times New Roman">8</font>个方向走，而位于盘角的象却只有一条逃生的路；</dt>
    <dt>　　<font face="Times New Roman">5. </font>在开始游戏之前，要计算数据库里在所有格子的所有棋子的所有射线，假设棋盘是空的<font
        face="Times New Roman">(</font>即着法只受到棋盘边缘的限制，不受其他棋子的限制<font
        face="Times New Roman">)</font>；</dt>
    <dt>　　<font face="Times New Roman">6. </font>当你为某个格子的某个棋子产生着法时，朝每个方向搜索直到碰到棋子为止。如果是对方的棋子，最后一种着法就是吃子的着法，如果是本方的棋子，最后一种着法就是不合理的。</dt>
    <dt>　</dt>
    <dt>　　有了恰当的数据库，着法的产生就变成简单得接近于线性的寻找了，几乎用不着什么计算。整个事情就掌握在这么几千个字节里，只是置换表的一个零头。</dt>
    <dt>　</dt>
    <dt>　　以上提到的所有技术<font
        face="Times New Roman">(</font>位棋盘、置换表、历史表和预处理数据库<font
        face="Times New Roman">)</font>都会反映在我自己的程序中，当我写完这个连载以后就会发布出来。下个月我会详细介绍着法产生的方法。</dt>
    <dt>　</dt>
    <dt>　　<font face="Times New Roman">Fran</font>&ccedil;<font
        face="Times New Roman">ois Dominic Laram</font>&eacute;<font
        face="Times New Roman">e</font>，<font
        face="Times New Roman">2000</font>年<font
        face="Times New Roman">6</font>月</dt>
    <dt>　</dt>
    <dt>　　原文：<a
        href="http://www.gamedev.net/reference/programming/features/chess2/"
        target="_blank"><font face="Times New Roman">http://www.gamedev.net/reference/programming/features/chess2/</font></a></dt>
    <dt>　　译者：象棋百科全书网 <font
        face="Times New Roman">(</font><a
        href="mailto:webmaster@xqbase.com"><font
        face="Times New Roman">webmaster@xqbase.com</font></a><font
        face="Times New Roman">)</font></dt>
    <dt>　　类型：全译加译注</dt>
</dl>

<dir>
    <li>上一篇　<a href="basic_started.htm">国际象棋程序设计<font
        face="Times New Roman">(</font>一<font
        face="Times New Roman">)</font>：引言</a></li>
    <li>下一篇　<a href="basic_movegen.htm">国际象棋程序设计<font
        face="Times New Roman">(</font>三<font
        face="Times New Roman">)</font>：着法的产生</a></li>
    <li>返　回　<a href="../computer.htm">象棋百科全书――电脑象棋</a></li>
</dir>
<div align="center"><center>

<table border="0">
    <tr>
        <td><p align="center"><a
        href="http://www.xqbase.com/" target="_blank"><img
        src="../xqbase.gif" border="0" width="88"
        height="31"></a></p>
        </td>
    </tr>
    <tr>
        <td><a href="http://www.xqbase.com/"
        target="_blank"><font size="2" face="Arial"><strong>www.xqbase.com</strong></font></a></td>
    </tr>
</table>
</center></div>
</body>
</html>
