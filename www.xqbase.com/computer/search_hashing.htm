<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=gb_2312-80">
<meta name="GENERATOR" content="Microsoft FrontPage Express 2.0">
<title>基本搜索方法――置换表</title>
</head>

<body background="../background.gif">

<dl dir="ltr">
    <div align="center"><center>
    <dt>《对弈程序基本技术》专题</dt>
    </center></div><div align="center"><center>
    <dt>　</dt>
    </center></div><div align="center"><center>
    <dt><font size="6" face="隶书">置换表</font></dt>
    </center></div><div align="center"><center>
    <dt>　</dt>
    </center></div><div align="center"><center>
    <dt><font face="Times New Roman">Bruce Moreland / </font>文</dt>
    </center></div>
    <dt>　</dt>
    <dt><font size="5" face="楷体_GB2312"><strong>一个多功能的数据结构</strong></font></dt>
    <dt>　</dt>
    <dt>　　国际象棋的搜索树可以用图来表示，而置换结点可以引向以前搜索过的子树上。置换表可以用来检测这种情况，从而避免重复劳动。如果“<font
        face="Times New Roman">1. e4 d6 2. d4</font>”以后的局面已经搜索过了，那就没有必要再搜索“<font
        face="Times New Roman">1. d4 d6 2. e4</font>”以后的局面了。</dt>
    <dt>　　这个原因可能鼓舞着早期的电脑国际象棋程序的设计师们，而现在事实上这还是置换表的次要用途。在某些局面，例如在没有通路兵的王兵残局中，检查到的置换的数量是惊人的，以至于搜索可以在短达时间内达到很深的深度。</dt>
    <dt>　　省去重复的工作，这是置换表的一大特色，但是在一般的中局局面里，置换表的另一个作用更为重要。每个散列项里都有局面中最好的着法，我在“<a
        href="search_iterative.htm" target="_blank">迭代加深</a>”这一章里解释过，首先搜索好的着法可以大幅度提高搜索效率。因此如果你在散列项里找到最好的着法，那么你首先搜索这个着法，这样会改进你的着法顺序，减少分枝因子，从而在短的时间内搜索得更深。</dt>
    <dt>　</dt>
    <dt><font size="5" face="楷体_GB2312"><strong>实现</strong></font></dt>
    <dt>　</dt>
    <dt>　　主置换表是一个散列数组，每个散列项看上去像这样：</dt>
    <dd>　</dd>
    <dd>#define hashfEXACT 0</dd>
    <dd>#define hashfALPHA 1</dd>
    <dd>#define hashfBETA 2</dd>
    <dd>typedef struct tagHASHE {</dd>
    <dd>　U64 key;</dd>
    <dd>　int depth;</dd>
    <dd>　int flags;</dd>
    <dd>　int value;</dd>
    <dd>　MOVE best;</dd>
    <dd>} HASHE;</dd>
    <dd>　</dd>
    <dt>　　这个散列数组是以“<a
        href="struct_zobrist.htm" target="_blank"><font
        face="Times New Roman">Zobrist</font>键值</a>”为指标的。你求得局面的键值，除以散列表的项数得到余数，这个散列项就代表该局面。由于很多局面都有可能跟散列表中同一项作用，因此散列项需要包含一个校验值，它可以用来确认该项就是你要找的。通常校验值是一个<font
        face="Times New Roman">64</font>位的数，也就是上面那个例子的第一个域。</dt>
    <dt>　　你从搜索中得到结果后，要保存到散列表中。如果你打算用散列表来避免重复工作，那么重要的是记住搜索有多深。如果你在一个结点上搜索了<font
        face="Times New Roman">3</font>层，后来又打算做<font
        face="Times New Roman">10</font>层搜索，你就不能认为散列项里的信息是准确的。因此子树的搜索深度也要记录。</dt>
    <dt>　　在<font face="Times New Roman">Alpha-Beta</font>搜索中，你很少能得到搜索结点的准确值。<font
        face="Times New Roman">Alpha</font>和<font
        face="Times New Roman">Beta</font>的存在有助你裁剪掉没有用的子树，但是用<font
        face="Times New Roman">Alpha-Beta</font>有个小的缺点，你通常不会知道一个结点到底有多坏或者有多好，你只是知道它足够坏或足够好，从而不需要浪费更多的时间。</dt>
    <dt>　　当然，这就引发了一个问题，散列项里到底要保存什么值，并且当你要获取它时怎样来做。答案是储存一个值，另加一个标志来说明这个值是什么含义。在我上面的例子中，比方说你在评价域中保存了<font
        face="Times New Roman">16</font>，并且在标志域保存了“<font
        face="Times New Roman">hashfEXACT</font>”，这就意味着该结点的评价是准确值<font
        face="Times New Roman">16</font>；如果你在标志域中保存了“<font
        face="Times New Roman">hashfALPHA</font>”，那么结点的值最多是<font
        face="Times New Roman">16</font>；如果保存了“<font
        face="Times New Roman">hashfBETA</font>”，这个值就至少是<font
        face="Times New Roman">16</font>。</dt>
    <dt>　　当你在搜索中遇到特定情况时，很容易决定评价和标志应该保存哪些内容。然而避免错误是非常重要的，散列表是非常容易犯错误的，而且一旦犯下错误就很难捕捉出来。</dt>
    <dt>　　我的散列项的最后一个域，保存着上次搜索到这个局面时的最佳着法。有时我没有得到最佳着法，比如任何低出边界的情况<font
        face="Times New Roman">(</font>返回一个小于或等于<font
        face="Times New Roman">Alpha</font>的值<font
        face="Times New Roman">)</font>，而其他情况必定有最佳着法，比如高出边界的情况<font
        face="Times New Roman">(</font>返回一个大于或等于<font
        face="Times New Roman">Beta</font>的值<font
        face="Times New Roman">)</font>。<font color="#0000FF">【译注：只有叶子结点才没有最佳着法，即便是</font><font
        color="#0000FF" face="Times New Roman">Alpha</font><font
        color="#0000FF">结点，所有的着法都是差的，也应该从中找一个最好的着法，它对更深一层的搜索会带来很大的好处。】</font></dt>
    <dt>　　如果找到最佳着法，那么它应该首先被搜索。</dt>
    <dt>　　下面是示范程序，是根据<font
        face="Times New Roman">Alpha-Beta</font>函数修改的，改动的地方用醒目的字标出：</dt>
    <dt>　</dt>
    <dd>int AlphaBeta(int depth, int alpha, int beta) {</dd>
    <dd><font color="#FF0000">　int hashf = hashfALPHA;</font></dd>
    <dd><font color="#FF0000">　if ((val = ProbeHash(depth,
        alpha, beta)) != valUNKNOWN) {</font></dd>
    <dd><font color="#FF0000">　　// </font><font
        color="#0000FF">【valUNKNOWN必须小于-INFINITY或大于INFINITY，否则会跟评价值混淆。】</font></dd>
    <dd>　　return val;</dd>
    <dd>　}</dd>
    <dd>　if (depth == 0) {</dd>
    <dd>　　val = Evaluate();</dd>
    <dd><font color="#FF0000">　　RecordHash(depth, val,
        hashfEXACT);</font></dd>
    <dd>　　return val;</dd>
    <dd>　}</dd>
    <dd>　GenerateLegalMoves();</dd>
    <dd>　while (MovesLeft()) {</dd>
    <dd>　　MakeNextMove();</dd>
    <dd>　　val = -AlphaBeta(depth - 1, -beta, -alpha);</dd>
    <dd>　　UnmakeMove();</dd>
    <dd>　　if (val &gt;= beta) {</dd>
    <dd><font color="#FF0000">　　　RecordHash(depth, beta,
        hashfBETA);</font></dd>
    <dd>　　　return beta;</dd>
    <dd>　　}</dd>
    <dd>　　if (val &gt; alpha) {</dd>
    <dd><font color="#FF0000">　　　hashf = hashfEXACT;</font></dd>
    <dd>　　　alpha = val;</dd>
    <dd>　　}</dd>
    <dd>　}</dd>
    <dd><font color="#FF0000">　RecordHash(depth, alpha, hashf);</font></dd>
    <dd>　return alpha;</dd>
    <dd>}</dd>
    <dt>　</dt>
    <dt>　　以下就是两个新的函数的代码：</dt>
    <dd>　</dd>
    <dd>int ProbeHash(int depth, int alpha, int beta) {</dd>
    <dd>　HASHE *phashe = &amp;hash_table[ZobristKey() %
        TableSize()];</dd>
    <dd>　if (phashe-&gt;key == ZobristKey()) {</dd>
    <dd>　　if (phashe-&gt;depth &gt;= depth) {</dd>
    <dd>　　　if (phashe-&gt;flags == hashfEXACT) {</dd>
    <dd>　　　　return phashe-&gt;val;</dd>
    <dd>　　　}</dd>
    <dd>　　　if ((phashe-&gt;flags == hashfALPHA) &amp;&amp;
        (phashe-&gt;val &lt;= alpha)) {</dd>
    <dd>　　　　return alpha;</dd>
    <dd>　　　}</dd>
    <dd>　　　if ((phashe-&gt;flags == hashfBETA) &amp;&amp; (phashe-&gt;val
        &gt;= beta)) {</dd>
    <dd>　　　　return beta;</dd>
    <dd>　　　}</dd>
    <dd>　　}</dd>
    <dd>　　RememberBestMove();</dd>
    <dd>　}</dd>
    <dd>　return valUNKNOWN;</dd>
    <dd>}</dd>
    <dd>　</dd>
    <dd>void RecordHash(int depth, int val, int hashf) {</dd>
    <dd>　HASHE *phashe = &amp;hash_table[ZobristKey() %
        TableSize()];</dd>
    <dd>　phashe-&gt;key = ZobristKey();</dd>
    <dd>　phashe-&gt;best = BestMove();</dd>
    <dd>　phashe-&gt;val = val;</dd>
    <dd>　phashe-&gt;hashf = hashf;</dd>
    <dd>　phashe-&gt;depth = depth;</dd>
    <dd>}</dd>
    <dd>　</dd>
    <dt>　　你所看到的代码，并不像航天科学一样准确，而是很可能有错误的，而且细节上的问题我还没有讨论。如果你的程序中有错误，或许就是很严重的错误。</dt>
    <dt><font color="#0000FF">　　【以上代码有个速度上的瓶颈，即“</font><font
        color="#0000FF" face="Times New Roman">ZobristKey() %
        TableSize()</font><font color="#0000FF">”这个表达式。由于“电脑一做除法就成了傻瓜”，所以“</font><font
        color="#0000FF" face="Times New Roman">TableSize</font><font
        color="#0000FF">”最好是一个</font><font
        color="#0000FF" face="Times New Roman">2<sup><em>n</em></sup></font><font
        color="#0000FF">的常量，只有当除数是</font><font
        color="#0000FF" face="Times New Roman">2<sup><em>n</em></sup></font><font
        color="#0000FF">时除法才可以由右移指令取代。最好的方法是设一个“</font><font
        color="#0000FF" face="Times New Roman">TableSizeMask</font><font
        color="#0000FF">”的变量：</font></dt>
    <dd>　</dd>
    <dd><font color="#0000FF">int TableSizeMask = TableSize() - 1;</font></dd>
    <dd><font color="#0000FF">HASHE *phashe = &amp;hash_table[ZobristKey()
        &amp; TableSizeMask];</font></dd>
    <dt>　</dt>
    <dt><font color="#0000FF">　　而这里“</font><font
        color="#0000FF" face="Times New Roman">TableSize()</font><font
        color="#0000FF">”也必须是</font><font
        color="#0000FF" face="Times New Roman">2<sup><em>n</em></sup></font><font
        color="#0000FF">。正是这个道理，在很多可以设定置换表大小的国际象棋程序中，允许的设定值总是呈倍数增长的，要么是</font><font
        color="#0000FF" face="Times New Roman">3M</font><font
        color="#0000FF">、</font><font color="#0000FF"
        face="Times New Roman">6M</font><font color="#0000FF">、</font><font
        color="#0000FF" face="Times New Roman">12M</font><font
        color="#0000FF">、</font><font color="#0000FF"
        face="Times New Roman">24M</font><font color="#0000FF">等等</font><font
        color="#0000FF" face="Times New Roman">(</font><font
        color="#0000FF">如果每个散列项有</font><font
        color="#0000FF" face="Times New Roman">12</font><font
        color="#0000FF">字节</font><font color="#0000FF"
        face="Times New Roman">)</font><font color="#0000FF">，要么是</font><font
        color="#0000FF" face="Times New Roman">4M</font><font
        color="#0000FF">、</font><font color="#0000FF"
        face="Times New Roman">8M</font><font color="#0000FF">、</font><font
        color="#0000FF" face="Times New Roman">16M</font><font
        color="#0000FF">、</font><font color="#0000FF"
        face="Times New Roman">32M</font><font color="#0000FF">等等</font><font
        color="#0000FF" face="Times New Roman">(</font><font
        color="#0000FF">如果每个散列项有</font><font
        color="#0000FF" face="Times New Roman">16</font><font
        color="#0000FF">字节</font><font color="#0000FF"
        face="Times New Roman">)</font><font color="#0000FF">。】</font></dt>
    <dt>　</dt>
    <dt><a name="replacement"></a><font size="5"
        face="楷体_GB2312"><strong>替换策略</strong></font></dt>
    <dt>　</dt>
    <dt>　　最主要的细节就包括，什么时候该覆盖散列项。在上面的例子中，我用了“始终替换”的策略，即简单地覆盖已经存在的值。这或许不是最好的策略，事实上已经有大量的工作试图找出哪个策略是最好的。</dt>
    <dt>　　另一个策略是“同样深度或更深时替换”。除非新局面的深度大于或等于散列表中已经有的值，否则已经存在的结点将被保留。</dt>
    <dt>　　还有很多试验的余地。<font
        face="Times New Roman">1994</font>年我在<font
        face="Times New Roman">Usenet(</font>新闻组网络系统<font
        face="Times New Roman">)</font>的新闻组<font
        face="Times New Roman">rec.games.chess(</font>如今是<font
        face="Times New Roman">rec.games.chess.computer)</font>上问了这个问题，得到了<font
        face="Times New Roman">Ken Thompson</font>的答复。</dt>
    <dt>　　他的回答是使用两个散列表。一个使用“始终替换”策略，另一个使用“同样深度或更深时替换”。当你做试探时，两个散列表都去试探，如果其中一个可以产生截断，那就可以了。如果两者都不能产生截断，那么你可能至少得到一个最佳着法，实际上更多的可能是得到两个不同的着法，两者都应该首先<font
        face="Times New Roman">(</font>或第二个<font
        face="Times New Roman">)</font>尝试。</dt>
    <dt>　　记录的时候，你只要简单地根据替换策略来执行。</dt>
    <dt>　　如果你使用“同样深度或更深时替换”的策略，那么你的散列表可能最终会被过期的但很深的结点所占满。解决方案就是每次你走棋时都清除散列表，或者在散列项中加入“顺序”这个域，从而使这个策略变成变成“同样深度，或更深，或原来是旧的搜索，才替换”。</dt>
    <dt>　　我在我的程序<font face="Times New Roman">Ferret</font>中使用了<font
        face="Times New Roman">Thompson</font>的策略，并且运行得很好。另一个程序<font
        face="Times New Roman">Gerbil</font>也使用这个策略，你可以去看它的源代码。</dt>
    <dt><font color="#0000FF">　　【根据译者研究的结果，只用“深度优先覆盖”策略</font><font
        color="#0000FF" face="Times New Roman">(</font><font
        color="#0000FF">即“同样深度或更深时替换”</font><font
        color="#0000FF" face="Times New Roman">)</font><font
        color="#0000FF">，效果会比“始终替换”好得多，而代码则并不复杂，只有醒目的部分是新增的：</font></dt>
    <dd>　</dd>
    <dd><font color="#0000FF">void RecordHash(int depth, int val,
        int hashf) {</font></dd>
    <dd><font color="#0000FF">　HASHE *phashe = &amp;hash_table[ZobristKey()
        &amp; (TableSize() - 1)];</font></dd>
    <dd><font color="#FF0000">　if (phashe-&gt;hashf !=
        hashfEMPTY &amp;&amp; phashe-&gt;depth &gt; depth) {</font></dd>
    <dd><font color="#FF0000">　　return;</font></dd>
    <dd><font color="#FF0000">　}</font></dd>
    <dd><font color="#0000FF">　phashe-&gt;key = ZobristKey();</font></dd>
    <dd><font color="#0000FF">　phashe-&gt;best = BestMove();</font></dd>
    <dd><font color="#0000FF">　phashe-&gt;val = val;</font></dd>
    <dd><font color="#0000FF">　phashe-&gt;hashf = hashf;</font></dd>
    <dd><font color="#0000FF">　phashe-&gt;depth = depth;</font></dd>
    <dd><font color="#0000FF">}</font></dd>
    <dt>　</dt>
    <dt><font color="#0000FF">　　如果使用这个代码，那么每走一步以前都必须把散列表中所有的标志项置为“</font><font
        color="#0000FF" face="Times New Roman">hashfEMPTY</font><font
        color="#0000FF">”。】</font></dt>
    <dt>　</dt>
    <dt><font size="5" face="楷体_GB2312"><strong>不稳定性的问题</strong></font></dt>
    <dt>　</dt>
    <dt>　　当你用置换表时，如果你允许搜索过程根据散列项来截断，那就会产生另一个问题，你的搜索会受“<a
        href="advanced_instability.htm" target="_blank">不稳定性</a>”的捆扰。</dt>
    <dt>　　不稳定性至少是由以下因素引起的：</dt>
    <dt>　　<font face="Times New Roman">1. </font>你可能在做<font
        face="Times New Roman">6</font>层的搜索，但是如果你在散列项中得到<font
        face="Times New Roman">10</font>层搜索的结果，就可能根据这个值来截断。在后来的搜索中，这个散列项被覆盖了，因此你在这个结点上得到了两个不同的值。</dt>
    <dt>　　<font face="Times New Roman">2. Zobrist</font>键值无法记录到达结点的线路，这个结点上不是每条线路都有相同结果的。如果某条线路遇到重复局面，那么散列项的值就会跟路线有关。因为重复局面会导致和局的分值，或者至少不一样的分值。</dt>
    <dt>　　就我所知，还没有什么办法能处理这些问题。</dt>
    <dt><font color="#0000FF">　　【另外，如果搜索过程中找到杀棋，那么评价值会接近“</font><font
        color="#0000FF" face="Times New Roman">INFINITY</font><font
        color="#0000FF">”或“</font><font color="#0000FF"
        face="Symbol">-</font><font color="#0000FF"
        face="Times New Roman">INFINITY</font><font
        color="#0000FF">”，此时记录散列表时不能简单地记录这些评价值，在后面介绍的“</font><a
        href="other_winning.htm" target="_blank"><font
        color="#0000FF">胜利局面</font></a><font
        color="#0000FF">”的处理中，会谈到这个问题。】</font></dt>
    <dt>　</dt>
    <dt>　　原文：<a
        href="http://www.seanet.com/~brucemo/topics/hashing.htm"
        target="_blank"><font face="Times New Roman">http://www.seanet.com/~brucemo/topics/hashing.htm</font></a></dt>
    <dt>　　译者：象棋百科全书网 <font
        face="Times New Roman">(</font><a
        href="mailto:webmaster@xqbase.com"><font
        face="Times New Roman">webmaster@xqbase.com</font></a><font
        face="Times New Roman">)</font></dt>
    <dt>　　类型：全译加译注</dt>
</dl>

<dir>
    <li>上一篇　<a href="search_iterative.htm">基本搜索方法――迭代加深</a></li>
    <li>下一篇　<a href="advanced_intro1.htm">高级搜索方法――简介<font
        face="Times New Roman">(</font>一<font
        face="Times New Roman">)</font></a></li>
    <li>返　回　<a href="../computer.htm">象棋百科全书――电脑象棋</a></li>
</dir>
<div align="center"><center>

<table border="0">
    <tr>
        <td><p align="center"><a
        href="http://www.xqbase.com/" target="_blank"><img
        src="../xqbase.gif" border="0" width="88"
        height="31"></a></p>
        </td>
    </tr>
    <tr>
        <td><a href="http://www.xqbase.com/"
        target="_blank"><font size="2" face="Arial"><strong>www.xqbase.com</strong></font></a></td>
    </tr>
</table>
</center></div>
</body>
</html>
