<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=gb_2312-80">
<meta name="GENERATOR" content="Microsoft FrontPage Express 2.0">
<title>基本搜索方法――最小-最大搜索</title>
</head>

<body background="../background.gif">

<dl dir="ltr">
    <div align="center"><center>
    <dt>《对弈程序基本技术》专题</dt>
    </center></div><div align="center"><center>
    <dt>　</dt>
    </center></div><div align="center"><center>
    <dt><font size="6" face="隶书">最小</font><font size="6"
        face="Arial">-</font><font size="6" face="隶书">最大搜索</font></dt>
    </center></div><div align="center"><center>
    <dt>　</dt>
    </center></div><div align="center"><center>
    <dt><font face="Times New Roman">Bruce Moreland / </font>文</dt>
    </center></div>
    <dt>　</dt>
    <dt><font size="5" face="楷体_GB2312"><strong>从浅显的地方开始</strong></font></dt>
    <dt>　</dt>
    <dt>　　在国际象棋里，双方棋手都知道每个棋子在哪里，他们轮流走并且可以走任何合理的着法。下棋的目的就是将死对方，或者避免被将死，或者有时争取和棋是最好的选择。</dt>
    <dt>　　国际象棋程序通过使用“搜索”函数来寻找着法。搜索函数获得棋局信息，然后寻找对于程序一方来说最好的着法。</dt>
    <dt>　　一个浅显的搜索函数用“树状搜索”<font
        face="Times New Roman">(Tree-Searching)</font>来实现。一个国际象棋棋局通常可以看作一个很大的<font
        face="Times New Roman"><em>n</em></font>叉树<font
        face="Times New Roman">(</font>“<font
        face="Times New Roman"><em>n</em></font>叉树”意思是树的每个结点有任意多个分枝通向其他结点<font
        face="Times New Roman">)</font>，棋盘上目前的局面就是“根局面”<font
        face="Times New Roman">(Root Position)</font>或“根结点”<font
        face="Times New Roman">(Root Node)</font>。从根局面走一步棋，局面就到达根局面的“分枝”<font
        face="Times New Roman">(Branch)</font>，这些局面称为“后续局面”<font
        face="Times New Roman">(Successor Position)</font>或“后续结点”<font
        face="Times New Roman">(Successor Nodes)</font>。每个后续局面后面还有一系列分枝，每个分枝就是这个局面的一个合理的着法。</dt>
    <dt>　　国际象棋的树非常庞大<font
        face="Times New Roman">(</font>通常每个局面有<font
        face="Times New Roman">35</font>个分枝<font
        face="Times New Roman">)</font>，又非常深。</dt>
    <dt>　　每盘棋局都是一棵巨大的<font
        face="Times New Roman"><em>n</em></font>叉树，如果能通过树状搜索找到棋局中对双方来说都最好的着法就好了。这个浅显的算法在这里称为“最小<font
        face="Times New Roman">-</font>最大搜索”<font
        face="Times New Roman">(Min-max Search)</font>。</dt>
    <dt>　　用最小<font face="Times New Roman">-</font>最大搜索来解诸如井字棋的简单棋局是可行的<font
        face="Times New Roman">(</font>即完全了解每一种变化<font
        face="Times New Roman">)</font>。井字棋的博弈树既不烦琐也不深，所以整个树可以遍历，棋局的所有变化都可以知道，任何局面都可以保证找到一步最佳着法。</dt>
    <dt>　　数学上用这种方法处理国际象棋也是可以的，但是目前和不久的将来用计算机去实现，却是不可行的。即便如此，我们仍然可以用基于最小<font
        face="Times New Roman">-</font>最大搜索的程序来下国际象棋。相比最小<font
        face="Times New Roman">-</font>最大地搜索整个树，在一个给定的局面下搜索前几步则是可能的。由于叶子结点的局面没能搜索出杀棋或和棋，所以要用一个称为“评价”<font
        face="Times New Roman">(Evaluate)</font>的启发函数给这些局面赋值。尽管程序设计师希望这些值能够通过知识来得到，但它们确实都是猜的。</dt>
    <dt>　</dt>
    <dt><font size="5" face="楷体_GB2312"><strong>基于最小-最大的评价函数</strong></font></dt>
    <dt>　</dt>
    <dt>　　我不打算在这里谈很多关于评价函数的细节。这里我只说明它是怎样确定的，在以后的章节中会详细展开。评价函数首先应该返回局面的准确值，在没办法得到准确值的情况下，如果可能的话启发值也可以。它可以由两种方法来决定：</dt>
    <dt>　　<font face="Times New Roman">(1) </font>如果黑方被将死了，那么评价函数返回一个充分大的正数；如果白方被将死了，那么返回一个充分大的负数；如果棋局是和棋<font
        face="Times New Roman">(</font>例如某一方逼和，或者双方都只有王<font
        face="Times New Roman">)</font>，那么返回一个常数，通常是零或接近零。如果不是棋局结束局面，那么它返回一个启发值。我将不详细介绍这个启发值是如何确定的，但是我有把握说子力平衡是首先要考虑的<font
        face="Times New Roman">(</font>如果白方盘面上多子的话，这个值就大<font
        face="Times New Roman">)</font>，而其他位置上的考虑<font
        face="Times New Roman">(</font>兵型、王的安全性、重要的子力等等<font
        face="Times New Roman">)</font>也需要加上。如果白方是赢棋或者很有希望赢，那么启发函数通常会返回正数；如果黑方是赢棋或者很有希望赢，那么返回负数；如果棋局是均势或者是和棋，那么返回在零左右的数值。</dt>
    <dt>　　<font face="Times New Roman">(2) </font>这个函数的工作原理跟第一个一样，只是如果当前局面要走子的一方优势，那么它返回正数，反之是负数。</dt>
    <dt>　</dt>
    <dt><font size="5" face="楷体_GB2312"><strong>最小</strong></font><font
        size="5" face="Arial"><strong>-</strong></font><font
        size="5" face="楷体_GB2312"><strong>最大搜索是如何运作的</strong></font></dt>
    <dt>　</dt>
    <dt>　　最小<font face="Times New Roman">-</font>最大搜索是一对几乎一样的函数，或者说两个逻辑上重复的函数。我写了很少的代码，用一个更好的函数来完成同一件事，但是写出来时却收到一些意见，因此我首先写出纯粹的<font
        face="Times New Roman">(</font>不完美的<font
        face="Times New Roman">)</font>最小<font
        face="Times New Roman">-</font>最大函数，代码如下：</dt>
    <dd>　</dd>
    <dd>int MinMax(int depth) {</dd>
    <dd>　if (SideToMove() == WHITE) {　// 白方是“最大”者</dd>
    <dd>　　return Max(depth);</dd>
    <dd>　} else {　　　　　　　　　　　// 黑方是“最小”者</dd>
    <dd>　　return Min(depth);</dd>
    <dd>　}</dd>
    <dd>}</dd>
    <dd>　</dd>
    <dd>int Max(int depth) {</dd>
    <dd>　int best = -INFINITY;</dd>
    <dd>　if (depth &lt;= 0) {</dd>
    <dd>　　return Evaluate();</dd>
    <dd>　}</dd>
    <dd>　GenerateLegalMoves();</dd>
    <dd>　while (MovesLeft()) {</dd>
    <dd><font face="宋体">　　</font>MakeNextMove();</dd>
    <dd>　　val = Min(depth - 1);</dd>
    <dd><font face="宋体">　　</font>UnmakeMove();</dd>
    <dd>　　if (val &gt; best) {</dd>
    <dd>　　　best = val;</dd>
    <dd>　　}</dd>
    <dd>　}</dd>
    <dd>　return best;</dd>
    <dd>}</dd>
    <dd>　</dd>
    <dd>int Min(int depth) {</dd>
    <dd>　int best = INFINITY;　// 注意这里不同于“最大”算法</dd>
    <dd>　if (depth &lt;= 0) {</dd>
    <dd>　　return Evaluate();</dd>
    <dd>　}</dd>
    <dd>　GenerateLegalMoves();</dd>
    <dd>　while (MovesLeft()) {</dd>
    <dd>　　MakeNextMove();</dd>
    <dd>　　val = Max(depth - 1);</dd>
    <dd>　　UnmakeMove();</dd>
    <dd>　　if (val &lt; best) { 　// 注意这里不同于“最大”算法</dd>
    <dd>　　　best = val;</dd>
    <dd>　　}</dd>
    <dd>　}</dd>
    <dd>　return best;</dd>
    <dd>}</dd>
    <dt>　</dt>
    <dt>　　上面的代码可以这样调用：</dt>
    <dd>　</dd>
    <dd>val = MinMax(5);</dd>
    <dt>　</dt>
    <dt>　　这样可以返回当前局面的评价，它是向前看<font
        face="Times New Roman">5</font>步的结果。</dt>
    <dt>　　这里的“评价”函数用的是我上面所说第一种定义，它总是返回对于白方来说的局面。</dt>
    <dt>　　我简要描述一下这个函数是如何运作的。假设根局面<font
        face="Times New Roman">(</font>棋盘上当前局面<font
        face="Times New Roman">)</font>是白方走，那么调用的是“<font
        face="Times New Roman">Max</font>”函数，它产生白方所有合理着法。在每个后续局面中，调用的是“<font
        face="Times New Roman">Min</font>”函数，它对局面作出评价并返回。由于现在是白走，因此白方需要让评价尽可能地大，能得到最大值的那个着法被认为是最好的，因此返回这个着法的评价。</dt>
    <dt>　　“<font face="Times New Roman">Min</font>”函数正好相反，当黑方走时调用“<font
        face="Times New Roman">Min</font>”函数，而黑方需要尽可能地小，因此选择能得到最小值的那个着法。</dt>
    <dt>　　这两个函数是互相递归的，即它们互相调用，直到达到所需要的深度为止。当函数到达最底层时，它们就返回“<font
        face="Times New Roman">Evaluate</font>”函数的值。</dt>
    <dt>　　如果在深度为<font face="Times New Roman">1</font>时调用“<font
        face="Times New Roman">MinMax</font>”函数，那么“<font
        face="Times New Roman">Evaluate</font>”函数在走完每个合理着法之后就调用，选择一个能达到最佳值的那个着法导致的局面。如果层数大于<font
        face="Times New Roman">1</font>，那么另一方有权选择局面，并找一个最好的。</dt>
    <dt>　　以上内容应该不难理解，但是代码很长，下面有个更好的办法。</dt>
    <dt>　</dt>
    <dt><font size="5" face="楷体_GB2312"><strong>负值最大函数</strong></font></dt>
    <dt>　</dt>
    <dt>　　负值最大只是对最小-最大的优化，“评价”函数返回我所说的第二种定义，对于当前结点上要走的一方，占优的情况返回正值，其他结点也是对于要走的一方而言的。这个值返回后要加上负号，因为返回以后就是对另一方而言了。代码如下：</dt>
    <dd>　</dd>
    <dd>int NegaMax(int depth) {</dd>
    <dd>　int best = -INFINITY;</dd>
    <dd>　if (depth &lt;= 0) {</dd>
    <dd>　　return Evaluate();</dd>
    <dd>　}</dd>
    <dd>　GenerateLegalMoves();</dd>
    <dd>　while (MovesLeft()) {</dd>
    <dd>　　MakeNextMove();</dd>
    <dd>　　val = -NegaMax(depth - 1); //
        注意这里有个负号。</dd>
    <dd>　　UnmakeMove();</dd>
    <dd>　　if (val &gt; best) {</dd>
    <dd>　　　best = val;</dd>
    <dd>　　}</dd>
    <dd>　}</dd>
    <dd>　return best;</dd>
    <dd>}</dd>
    <dt>　</dt>
    <dt>　　在这个函数里，当走子一方改变时就要对返回值取负值，以反映当前局面评价的更改。就根结点是白先走的情况，如果没有剩下的层数，那么“评价”返回的值是就白方而言的，如果有剩下的层数，就产生后续局面，函数对这些局面逐一做递归，每个次递归都得到就黑方而言的评价，黑方走得越好值就越大。当评价值返回时，它们被取负数，变成就白方而言的评价。</dt>
    <dt>　　该函数在遍历时结点的顺序同“最小<font
        face="Times New Roman">-</font>最大”搜索的函数是一样的，产生的返回值也一样。它的代码更短，同时减少了移植代码时出错的可能，代码维护起来也比较方便。</dt>
    <dt>　</dt>
    <dt>　　原文：<a
        href="http://www.seanet.com/~brucemo/topics/minmax.htm"
        target="_blank"><font face="Times New Roman">http://www.seanet.com/~brucemo/topics/minmax.htm</font></a></dt>
    <dt>　　译者：象棋百科全书网 <font
        face="Times New Roman">(</font><a
        href="mailto:webmaster@xqbase.com"><font
        face="Times New Roman">webmaster@xqbase.com</font></a><font
        face="Times New Roman">)</font></dt>
    <dt>　　类型：全译</dt>
</dl>

<dir>
    <li>上一篇　<a href="search_intro3.htm">基本搜索方法――简介<font
        face="Times New Roman">(</font>三<font
        face="Times New Roman">)</font></a></li>
    <li>下一篇　<a href="search_alphabeta.htm">基本搜索方法――<font
        face="Times New Roman">Alpha-Beta</font>搜索</a></li>
    <li>返　回　<a href="../computer.htm">象棋百科全书――电脑象棋</a></li>
</dir>
<div align="center"><center>

<table border="0">
    <tr>
        <td><p align="center"><a
        href="http://www.xqbase.com/" target="_blank"><img
        src="../xqbase.gif" border="0" width="88"
        height="31"></a></p>
        </td>
    </tr>
    <tr>
        <td><a href="http://www.xqbase.com/"
        target="_blank"><font size="2" face="Arial"><strong>www.xqbase.com</strong></font></a></td>
    </tr>
</table>
</center></div>
</body>
</html>
