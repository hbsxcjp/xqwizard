<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=gb_2312-80">
<meta name="GENERATOR" content="Microsoft FrontPage Express 2.0">
<title>数据结构――着法生成器</title>
</head>

<body background="../background.gif">

<dl>
    <div align="center"><center>
    <dt><font size="3">《对弈程序基本技术》专题</font></dt>
    </center></div>
    <dt>　</dt>
    <div align="center"><center>
    <dt><font size="6" face="隶书">着法生成器</font></dt>
    </center></div><div align="center"><center>
    <dt>　</dt>
    </center></div><div align="center"><center>
    <dt>作者 <font face="Times New Roman">James Swafford</font></dt>
    </center></div><div align="center"><center>
    <dt>　</dt>
    </center></div>
    <dt>　　“着法生成器”在不同的引擎中差异较大。本文将向你演示使用位棋盘<font
        face="Times New Roman">(aka bitmaps)</font><font
        color="#0000FF">【编者注：即前两章所说的</font><font
        color="#0000FF" face="Times New Roman">BitBoard</font><font
        color="#0000FF">】</font>时生成着法的基本原理。高级的国际象棋引擎通常具备一次只生成一小部分着法的能力。例如，仅生成象走的着法，马走的着法，导致升变的着法，所有的吃子着法等等，这正是位棋盘的强项。那为什么用这种方式生成着法呢？原因是生成着法耗费一定的时间。如果你的引擎在检查了一部分着法后发现了必须走的棋，那它就无需生成余下的棋步了。因此，你可能想先生成所有吃子的着法，如果没有满意的棋再生成余下的着法。<font
        face="Times New Roman">(</font>用来减少耗时的着法生成策略很多――发挥你的想象力吧<font
        face="Times New Roman">)</font>。</dt>
    <dt>　　大名鼎鼎的免费国际象棋引擎<font
        face="Times New Roman">Crafty(</font>其作者是<font
        face="Times New Roman">Robert Hyatt</font>博士<font
        face="Times New Roman">)</font>使用三个着法生成函数。一个用来生成所有伪合法吃子着法，一个生成所有伪合法不吃子着法，最后一个生成所有摆脱被将军状态的着法。注意前两个函数生成的是伪合法的着法。就是说，这些函数生成的着法并非都是合法的。例如，你要生成所有将军的着法并且发现了一步你想走的棋，但随后发现这步不合法再把它抛弃。这看起来很奇怪，但它确实比那种在所有局面下都严格生成合法着法的策略更快！<font
        face="Times New Roman">Hyatt</font>博士曾经这样解释：当国王被将时，你需要生成摆脱被将的着法，这时大部分生成的着法是不合法的，在这种局面中你使用生成所有合法着法的策略会帮你节省时间；但在大多数局面中，生成的着法都是合法的，推迟验证合法性会更有效率。</dt>
    <dt>　　记住上面讲的内容，让我们看一些例程！下面这段代码选自我目前正在开发的引擎<font
        face="Times New Roman">(</font>其设计理念同时受到了<font
        face="Times New Roman">Crafty</font>和<font
        face="Times New Roman">Tom's Simple Chess Program</font>的影响<font
        face="Times New Roman">)</font>。它生成伪合法的马吃子的着法。</dt>
    <dt>　</dt>
    <dd>gen_rec *GenWhiteKnightCaps(chess_pos *posptr, gen_rec *m)
        {</dd>
    <dd>　piece_map = posptr -&gt; whiteknights;</dd>
    <dd>　while (piece_map) {</dd>
    <dd>　　from_sq = MSB(piece_map);</dd>
    <dd>　　piece_map ^= mask[from_sq];</dd>
    <dd>　　to_map = nmoves[from_sq] &amp; posptr -&gt;
        blackpieces;</dd>
    <dd>　　while (to_map) {</dd>
    <dd>　　　to_sq = MSB(to_map);</dd>
    <dd>　　　to_map ^= mask[to_sq];</dd>
    <dd>　　　m -&gt; m.b.from = from_sq;</dd>
    <dd>　　　m -&gt; m.b.to = to_sq;</dd>
    <dd>　　　m -&gt; m.b.promote = 0;</dd>
    <dd>　　　m -&gt; m.b.bits = 1;</dd>
    <dd>　　　m -&gt; score = piece_val[posptr -&gt; piece[to_sq]
        + 7] - KNIGHT_value;</dd>
    <dd>　　　m ++;</dd>
    <dd>　　}</dd>
    <dd>　}</dd>
    <dd>　return m;</dd>
    <dd>}</dd>
    <dt>　</dt>
    <dt>　　<font face="Times New Roman">gen_rec</font>是记录着法和它的得分的数据结构。上面的函数获得的第一个参数是一个指针指向需要从中生成着法的位棋盘的位置。第二个参数同样是一个指针，指向着法栈<font
        face="Times New Roman">(</font>储存生成着法的栈<font
        face="Times New Roman">)</font>中下一个存放着法的位置。这个函数返回一个指针，指向着法栈中下一个可以存放着法的位置。</dt>
    <dt>　　<font face="Times New Roman">Piece_map</font>是一个位棋盘，最初记录所有白棋马的位置。然后，这些“位”<font
        face="Times New Roman">(</font>对应于棋盘上有白棋马的格<font
        face="Times New Roman">)</font>依次被解析出来。解析出来的“位”被用来生成另一个位棋盘，它记录了白马在该“位”<font
        face="Times New Roman">(</font>格子<font
        face="Times New Roman">)</font>上时所有受其攻击且上面有黑棋的“位”<font
        face="Times New Roman">(</font>格<font
        face="Times New Roman">)</font>。这些“位”再被依次取出，成为着法，被压入着法栈，附带存入这步棋的得分<font
        face="Times New Roman">(</font>虽然我是这样做的，但并非必要<font
        face="Times New Roman">)</font>。</dt>
    <dt>　　我们再来看下面的函数。它被设计成生成黑棋象和皇后的伪合法、不吃子着法。注意它并未生成所有皇后的不吃子着法，仅仅是它的沿着斜线走的着法。</dt>
    <dt>　</dt>
    <dd>gen_rec *GenBlackBishopQueenNonCaps(chess_pos *posptr,
        gen_rec *m) {</dd>
    <dd>　piece_map = posptr -&gt; blackbishops | posptr -&gt;
        blackqueens;</dd>
    <dd>　while (piece_map) {</dd>
    <dd>　　from_sq = LSB(piece_map);</dd>
    <dd>　　piece_map ^= mask[from_sq];</dd>
    <dd>　　to_map = BishopMoves(from_sq, posptr) &amp; ~(posptr
        -&gt; whitepieces | posptr -&gt; blackpieces);</dd>
    <dd>　　while (to_map) {</dd>
    <dd>　　　to_sq = LSB(to_map);</dd>
    <dd>　　　to_map ^= mask[to_sq];</dd>
    <dd>　　　m -&gt; m.b.from = from_sq;</dd>
    <dd>　　　m -&gt; m.b.to = to_sq;</dd>
    <dd>　　　m -&gt; m.b.promote = 0;</dd>
    <dd>　　　m -&gt; m.b.bits = 0;</dd>
    <dd>　　　m -&gt; score=history[from_sq][to_sq];</dd>
    <dd>　　　m++;</dd>
    <dd>　　}</dd>
    <dd>　}</dd>
    <dd>　return m;</dd>
    <dd>}</dd>
    <dd>　</dd>
    <dt>　　这个函数同上一个相比并没有太多的不同。它接受一样的参数，返回指向最后一个被压入的着法的下面一个位置的指针。</dt>
    <dt>　　<font face="Times New Roman">Piece_map</font>位棋盘最初记录所有黑棋象和皇后的位置，这些“位”被依次析出；生成棋子在该“位”上所有走斜线的着法的位棋盘，加上着法的得分并压入着法栈。</dt>
    <dt>　　但这两个函数是存在一些不同的，例如这个函数中用“<font
        face="Times New Roman">LSB()</font>”来析取“位”，<font
        face="Times New Roman">LSB(Least Significant Bit)</font>意思是最低位。我在这个函数中用<font
        face="Times New Roman">LSB</font>是因为黑棋棋子靠近<font
        face="Times New Roman">A8</font>格，在我的程序中<font
        face="Times New Roman">A8</font>格编号为<font
        face="Times New Roman">0</font>。相反，白棋则靠近<font
        face="Times New Roman">H1</font>，它在程序中的编号为<font
        face="Times New Roman">63</font>，所以在生成白棋着法的例程中我使用<font
        face="Times New Roman">MSB(Most Significant Bit</font>，最高位<font
        face="Times New Roman">)</font>。</dt>
    <dt>　　另一个区别是评分算法。注意，在生成着法的时候就给每个着法打分并非必要，只是我的程序中是这样做的。在生成吃子着法的例程中所使用的评分策略是<font
        face="Times New Roman">MVV/LVA</font>算法<font
        face="Times New Roman">(</font>最有价值的受害者<font
        face="Times New Roman">/</font>最没有价值的攻击者<font
        face="Times New Roman">)</font>。其实就是每步棋的得分等于被吃子的价值减掉吃它的子的价值。对于不吃子着法的例程，使用的是历史启发算法。历史启发算法将在以后给你介绍。</dt>
    <dt>　　下面的代码将生成给定一方的所有伪合法的吃子着法。</dt>
    <dt>　</dt>
    <dd>gen_rec *GenCaps(chess_pos *posptr, gen_rec *m) {</dd>
    <dd>　if (posptr -&gt; player) {</dd>
    <dd>　　// white to move</dd>
    <dd>　　m = GenWhiteKnightCaps(posptr, m);</dd>
    <dd>　　m = GenWhiteBishopCaps(posptr, m);</dd>
    <dd>　　m = GenWhiteRookCaps(posptr, m);</dd>
    <dd>　　m = GenWhiteQueenCaps(posptr, m);</dd>
    <dd>　　m = GenWhiteKingCaps(posptr, m);</dd>
    <dd>　　m = GenWhitePawnCaps(posptr, m);</dd>
    <dd>　} else {</dd>
    <dd>　　// black to move</dd>
    <dd>　　m = GenBlackKnightCaps(posptr, m);</dd>
    <dd>　　m = GenBlackBishopCaps(posptr, m);</dd>
    <dd>　　m = GenBlackRookCaps(posptr, m);</dd>
    <dd>　　m = GenBlackQueenCaps(posptr, m);</dd>
    <dd>　　m = GenBlackKingCaps(posptr, m);</dd>
    <dd>　　m = GenBlackPawnCaps(posptr, m);</dd>
    <dd>　}</dd>
    <dd>　return m;</dd>
    <dd>}</dd>
    <dd>　</dd>
    <dt>　　这个函数非常“直观”。它获得两个指针，分别指向棋盘位置和着法栈中相应的位置。然后生成走棋一方的所有棋子的吃子着法。最后返回一个指针，指向着法栈的下一个空位<font
        face="Times New Roman">(</font>就是你压入的最后一个着法的下面一个位置<font
        face="Times New Roman">)</font>。</dt>
    <dt>　　现在你完全可以开始动手编写你自己的国际象棋引擎了！如果你想看更多的代码，请看下面。祝你好运！</dt>
    <dt>　</dt>
    <dt>　　出处：不详</dt>
    <dt>　　译者：<font face="Times New Roman">Allen Liu (</font><a
        href="http://lostboy.myrice.com/home.htm" target="_blank"><font
        color="#0000FF" face="Times New Roman">http://lostboy.myrice.com/</font></a><font
        face="Times New Roman">)</font></dt>
    <dt>　　类型：不详</dt>
    <dt>　　编辑：象棋百科全书网 <font
        face="Times New Roman">(</font><a
        href="mailto:webmaster@xqbase.com"><font
        face="Times New Roman">webmaster@xqbase.com</font></a><font
        face="Times New Roman">)</font></dt>
</dl>

<dir>
    <li>上一篇　<a href="struct_rotation.htm">数据结构――旋转的位棋盘</a></li>
    <li>下一篇　<a href="struct_0x88.htm">数据结构――<font
        face="Times New Roman">0x88</font>着法产生方法</a></li>
    <li>返　回　<a href="../computer.htm">象棋百科全书――电脑象棋</a></li>
</dir>
<div align="center"><center>

<table border="0">
    <tr>
        <td><p align="center"><a
        href="http://www.xqbase.com/" target="_blank"><img
        src="../xqbase.gif" border="0" width="88"
        height="31"></a></p>
        </td>
    </tr>
    <tr>
        <td><a href="http://www.xqbase.com/"
        target="_blank"><font size="2" face="Arial"><strong>www.xqbase.com</strong></font></a></td>
    </tr>
</table>
</center></div>
</body>
</html>
